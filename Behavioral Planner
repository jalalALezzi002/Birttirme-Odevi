1. # State machine states
 2. FOLLOW_LANE = 0
 3. DECELERATE_TO_STOP = 1
 4. STAY_STOPPED = 2
 5.  
 6. # Stop speed threshold
 7. STOP_THRESHOLD = 0.02
 8.  
 9. # Number of cycles before moving from stop sign.
10. STOP_COUNTS = 10
11.  
12. class BehaviouralPlanner:
13.     def __init__(self, lookahead, stopsign_fences, lead_vehicle_lookahead):
14.         self._lookahead                     = lookahead
15.         self._stopsign_fences               = stopsign_fences
16.         self._follow_lead_vehicle_lookahead = lead_vehicle_lookahead
17.         self._state                         = FOLLOW_LANE
18.         self._follow_lead_vehicle           = False
19.         self._goal_state                    = [0.0, 0.0, 0.0]
20.         self._goal_index                    = 0
21.         self._stop_count                    = 0
22.  
23.     def set_lookahead(self, lookahead):
24.         self._lookahead = lookahead


26. def transition_state(self, waypoints, ego_state, closed_loop_speed):
27.     """Handles state transitions and computes the goal state."""
28.     if self._state == FOLLOW_LANE:
29.         print("I am following the lane")
30.         closest_len, closest_index = get_closest_index(waypoints, ego_state)
31.         goal_index = self.get_goal_index(waypoints, ego_state, closest_len, closest_index)
32.         goal_index, stop_sign_found = self.check_for_stop_signs(waypoints, closest_index, goal_index)
33.         self._goal_index = goal_index
34.         self._goal_state = waypoints[self._goal_index]
35.         if stop_sign_found:
36.             self._goal_state[2] = 0
37.             self._state = DECELERATE_TO_STOP
38.         print("stop_sign_found = %d" % stop_sign_found)
39.  

39.     elif self._state == DECELERATE_TO_STOP:
40.         print("Decelerating to stop")
41.         if closed_loop_speed > STOP_THRESHOLD:
42.             self._state = DECELERATE_TO_STOP
43.             print("closed_loop_speed = %f" % closed_loop_speed)
44.             print("The state of car: ")
45.             print(ego_state)
46.         else:
47.             self._state = STAY_STOPPED
48.             print("Begin to stop=========================") 


52.     elif self._state == STAY_STOPPED:
53.         print("Staying stopped")
54.         if self._stop_count == STOP_COUNTS:
55.             print("Try to follow the lane")
56.             closest_len, closest_index = get_closest_index(waypoints, ego_state)
57.             goal_index = self.get_goal_index(waypoints, ego_state, closest_len, closest_index)
58.             stop_sign_found = self.check_for_stop_signs(waypoints, closest_index, goal_index)[1]
59.             self._goal_index = goal_index
60.             self._goal_state = waypoints[self._goal_index]
61.             if not stop_sign_found:
62.                 self._state = FOLLOW_LANE
63.         else:
64.             self._stop_count += 1
65.     else:
66.         raise ValueError('Invalid state value.')


67. def get_goal_index(self, waypoints, ego_state, closest_len, closest_index):
68.     """Gets the goal index for the vehicle."""
69.     arc_length = closest_len
70.     wp_index = closest_index
71.     if arc_length > self._lookahead:
72.         return wp_index
73.     if wp_index == len(waypoints) - 1:
74.         return wp_index
75.     while wp_index < len(waypoints) - 1:
76.         arc_length += math.sqrt((waypoints[wp_index+1][0] - waypoints[wp_index][0]) ** 2 + (waypoints[wp_index+1][1] - waypoints[wp_index][1]) ** 2)
77.         if arc_length >= self._lookahead:
78.             wp_index += 1
79.             break
80.         else:
81.             wp_index += 1
82.     return wp_index


 85. def check_for_stop_signs(self, waypoints, closest_index, goal_index):
 86.     """Checks for a stop sign that is intervening the goal path."""
 87.     for i in range(closest_index, goal_index):
 88.         intersect_flag = False
 89.         for stopsign_fence in self._stopsign_fences:
 90.             wp_1 = np.array(waypoints[i][0:2])
 91.             wp_2 = np.array(waypoints[i+1][0:2])
 92.             s_1 = np.array(stopsign_fence[0:2])
 93.             s_2 = np.array(stopsign_fence[2:4])
 94.             v1 = np.subtract(wp_2, wp_1)
 95.             v2 = np.subtract(s_1, wp_2)
 96.             sign_1 = np.sign(np.cross(v1, v2))
 97.             v2 = np.subtract(s_2, wp_2)
 98.             sign_2 = np.sign(np.cross(v1, v2))
 99.             v1 = np.subtract(s_2, s_1)
100.             v2 = np.subtract(wp_1, s_2)
101.             sign_3 = np.sign(np.cross(v1, v2))
102.             v2 = np.subtract(wp_2, s_2)
103.             sign_4 = np.sign(np.cross(v1, v2))
104.             if (sign_1 != sign_2) and (sign_3 != sign_4):
105.                 intersect_flag = True
106.             if (sign_1 == 0) and pointOnSegment(wp_1, s_1, wp_2):
107.                 intersect_flag = True
108.             if (sign_2 == 0) and pointOnSegment(wp_1, s_2, wp_2):
109.                 intersect_flag = True
110.             if (sign_3 == 0) and pointOnSegment(s_1, wp_1, s_2):
111.                 intersect_flag = True
112.             if (sign_3 == 0) and pointOnSegment(s_1, wp_2, s_2):
113.                 intersect_flag = True
114.             if intersect_flag:
115.                 goal_index = i
116.                 return goal_index, True
117.     return goal_index, False


119. def check_for_lead_vehicle(self, ego_state, lead_car_position):
120.     """Checks for lead vehicle within the proximity of the ego car."""
121.     if not self._follow_lead_vehicle:
122.         lead_car_delta_vector = [lead_car_position[0] - ego_state[0], lead_car_position[1] - ego_state[1]]
123.         lead_car_distance = np.linalg.norm(lead_car_delta_vector)
124.         if lead_car_distance > self._follow_lead_vehicle_lookahead:
125.             return
126.         lead_car_delta_vector = np.divide(lead_car_delta_vector, lead_car_distance)
127.         ego_heading_vector = [math.cos(ego_state[2]), math.sin(ego_state[2])]
128.         if np.dot(lead_car_delta_vector, ego_heading_vector) < (1 / math.sqrt(2)):
129.             return
130.         self._follow_lead_vehicle = True
131.     else:
132.         lead_car_delta_vector = [lead_car_position[0] - ego_state[0], lead_car_position[1] - ego_state[1]]
133.         lead_car_distance = np.linalg.norm(lead_car_delta_vector)
134.         if lead_car_distance < self._follow_lead_vehicle_lookahead + 15:
135.             return
136.                 lead_car_delta_vector = np.divide(lead_car_delta_vector, lead_car_distance)
137.         ego_heading_vector = [math.cos(ego_state[2]), math.sin(ego_state[2])]
138.         if np.dot(lead_car_delta_vector, ego_heading_vector) > (1 / math.sqrt(2)):
139.             return
140.         self._follow_lead_vehicle = False


142. def pointOnSegment(p, q, r):
143.     """Check if point q lies on line segment pr."""
144.     if (q[0] <= max(p[0], r[0]) and q[0] >= min(p[0], r[0]) and
145.             q[1] <= max(p[1], r[1]) and q[1] >= min(p[1], r[1])):
146.         return True
147.     return False
148.  
149. def get_closest_index(waypoints, ego_state):
150.     """Gets the closest waypoint index to the ego vehicle."""
151.     closest_len = float('Inf')
152.     closest_index = 0
153.     for i in range(len(waypoints)):
154.         dist = np.linalg.norm([waypoints[i][0] - ego_state[0], waypoints[i][1] - ego_state[1]])
155.         if dist < closest_len:
156.             closest_len = dist
157.             closest_index = i
158.     return closest_len, closest_index


